// -----------------------------------------------------------------------------
// 1. Last Simple Selector
/// Find the last simple selector in a given selector
@function _last-simple-selector($selector) {
    $parsed: selector-parse($selector);
    @if length($parsed) > 1 {
        @error "`#{$selector}` contains #{length($parsed)} selectors and the `_last-simple-selector()`function accepts only 1.";
    }
    $last-simple-selector: nth(nth($parsed, 1), -1);
    @return $last-simple-selector;
}
// -----------------------------------------------------------------------------
// 2. Build Quantity Selector
/// Builds the selector for the quantity query
@function _build-quantity-selector($selector-append, $last-selector) {
    $quantity-selector: ();
    @each $s in & {
        $last-simple-selector: "~" + if($last-selector, $last-selector, _last-simple-selector($s));
        $sel: selector-append($s, $selector-append);
        $sel2: selector-nest($sel, $last-simple-selector);
        $quantity-selector: append($quantity-selector, $sel, "comma");
        $quantity-selector: append($quantity-selector, $sel2 , "comma");
    }
    @return $quantity-selector;
}
// -----------------------------------------------------------------------------
// 3. At least
/// Query when total items is at least N items
@mixin at-least($count, $selector: null) {
    $selector-append: ":nth-last-child(n+#{$count})";
    @if type-of($count) != "number" or not unitless($count) or $count < 1 {
        @error "`#{$count}` is not a valid number for `at-least`";
    }
    @if $selector != null and (type-of($selector) != "string" or length($selector) > 1) {
        @error "`#{$selector}` is not a valid selector for `at-least`";
    }
    $at-least-selector: _build-quantity-selector($selector-append, $selector);
    @at-root #{$at-least-selector} {
        @content;
    }
}
// -----------------------------------------------------------------------------
// 4. At most
/// Query when total items is at most N items
@mixin at-most($count, $selector: null) {
    $selector-append: ":nth-last-child(-n+#{$count}):first-child";
    @if type-of($count) != "number" or not unitless($count) or $count < 1 {
        @error "`#{$count}` is not a valid number for `at-most`.";
    }
    @if $selector != null and (type-of($selector) != "string" or length($selector) > 1) {
        @error "`#{$selector}` is not a valid selector for `at-most`";
    }
    $at-most-selector: _build-quantity-selector($selector-append, $selector);
    @at-root #{$at-most-selector} {
        @content;
    }
}
// -----------------------------------------------------------------------------
// 5. Between
/// Query when total items is at least X items and at most Y items
@mixin between($first, $last, $selector: null) {
    $selector-append: ":nth-last-child(n+#{$first}):nth-last-child(-n+#{$last}):first-child";
    @if type-of($first) != "number" or not unitless($first) or $first < 1 {
        @error "`#{$first}` is not a valid number for `between`";
    }
    @if type-of($last) != "number" or not unitless($last) or $last < 1 {
        @error "`#{$last}` is not a valid number for `between`";
    }
    @if $first > $last {
        @error "#{$first} canÂ´t be larger that #{$last} for `between`";
    }
    @if $selector != null and (type-of($selector) != "string" or length($selector) > 1) {
        @error "`#{$selector}` is not a valid selector for `between`";
    }
    $between-selector: _build-quantity-selector($selector-append, $selector);
    @at-root #{$between-selector} {
        @content;
    }
}
// -----------------------------------------------------------------------------
// 6. Exactly
// -----------------------------------------------------------------------------
/// Query when total items is exactly N items
@mixin exactly($count, $selector: null) {
    $selector-append: ":nth-last-child(#{$count}):first-child";
    @if type-of($count) != "number" or not unitless($count) or $count < 1 {
        @error "`#{$count}` is not a valid number for `exactly`";
    }
    @if $selector != null and (type-of($selector) != "string" or length($selector) > 1) {
        @error "`#{$selector}` is not a valid selector for `exactly`";
    }
    $exactly-selector: _build-quantity-selector($selector-append, $selector);
    @at-root #{$exactly-selector} {
        @content;
    }
}
@mixin critical {
    critical: this;
}
@mixin clearfix {
    &:after,
    &:before {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}
@mixin ls($param) {
    letter-spacing: ($param/1000) * 1em;
}
@mixin container() {
    max-width: $maxwidth-container + ($padding-container * 2) + px;
    min-width: 320px;
    margin: 0 auto;
    padding: {
        right: $padding-container + px;
        left: $padding-container + px;
    }
}
@mixin fz($px) {
    $maxwidth: ($maxwidth-container * .01) * 1px;
    font-size: $px;
    font-size: ($px / $maxwidth) * 1vw;
}
@mixin border-radius($radius: 5px) {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
            border-radius: $radius;
       -moz-background-clip: padding;
    -webkit-background-clip: padding-box;
            background-clip: padding-box;
}
@mixin transition($transition) {
    -webkit-transition: $transition;
       -moz-transition: $transition;
        -ms-transition: $transition;
         -o-transition: $transition;
            transition: $transition;
}
@mixin opacity($opacity: 1) {
    $ieOpacity: $opacity * 100;
        filter: "alpha(opacity=$ieOpacity)";
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=$ieOpacity)";
    opacity: $opacity;
}
@mixin breakpoint($width) {
    @media only screen and (max-width: ($width) + px) {
        @content;
    }
}
